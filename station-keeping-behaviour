#!/usr/bin/env python3
import time

from boatdclient import Point

from navigate import Navigator

points = boatdclient.get_current_waypoints()
minutes_in_box = 5

class StationKeepingBehaviour(Navigator):
    def __init__(self):
        super().__init__()
        self.center = (Point[0] + Point[1] + Point[2] + Point[3]) / 4
        self.set_target(self.center)
        self.bearing_to_center = self.boat.position.bearing_to(self.center)
        self.center_reached = False
        self.line_crossed = False
        self.enter_time = None
        self.time_to_center = None
        
        sorted_points = {}
        for point in points:
            sorted_points.update((self.boat.position.distance_to(point), point))
        self.nearest_line_points = sorted(sorted_points, key: lambda x: x[0])[0:2]
              
    def check_new_target(self):
        if self.boat.position.distance_to(self.center) < 1:
            self.center_reached = True
            
        if self.center_reached == False:  #go toward center           
            #FIXME (?) only when exactly equal to, no error either side
            if  self.boat.position.bearing_to(self.nearest_line_points[0]) == self.nearest_line_points[0].bearing_to(self.nearest_line_points[1]): 
                self.line_crossed = True
                self.enter_time = time.time()
                # FIXME initialise bearing_to_center hear instead of on startup, once this if statement is fixed above
            return self.bearing_to_center
                
        elif self.center_reached == True:  
                self.time_to_center = time.time() - self.enter_time
                if time.time() < self.enter_time + (minutes_in_box * 60) - self.time_to_center:
                    return None
                else
                    return self.bearing_to_center
                

if __name__ == '__main__':
    behaviour = StationKeepingBehaviour()
    behaviour.run()
